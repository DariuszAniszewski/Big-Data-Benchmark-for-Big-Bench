<?xml version="1.0" encoding="UTF-8"?>

<!--
/*******************************************************************************
 * Copyright (c) 2013, bankmark and/or its affiliates. All rights reserved. 
 * bankmark UG PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 ******************************************************************************/
-->
<generation>

 
 
	<!-- DEFAULT Scheduler for all Tables, if no table specific scheduler is specified-->
	<scheduler name="DefaultScheduler">
			<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner" staticTableOnAllNodes="false">
				<prePartition><!--  
				pdgf.core.dataGenerator.scheduler.Partition partition =getParentPartitioner().getDefaultPrePartition(project, table);	
				
				//exclude non-refresh tables from generation during refresh phase.
				if(${REFRESH_SYSTEM_ENABLED}>0 && ${REFRESH_PHASE}>0 ){
					partition.setExcluded(true);
				}
				return partition;							
				-->
				</prePartition>
			</partitioner>
	</scheduler>
	
	<!-- DEFAULT output for all Tables, if no table specific output is specified-->
	<output name="CSVRowOutput">
		<fileTemplate>outputDir + table.getName() +(nodeCount!=1?"_"+Integer.toString(nodeNumber):"")+ fileEnding</fileTemplate>
		<outputDir>output/</outputDir>
		<fileEnding>.dat</fileEnding>
		<delimiter>|</delimiter>
		<charset>UTF-8</charset>
		<sortByRowID>true</sortByRowID>
	</output>

	<schema name="default">
		<tables>	
		<!-- not refreshed tables -->	
			
			<!-- tables not used in benchmark, not refreshed. Kept for legacy reasons  -->
			<table name="income_band"></table>
			<table name="reason"></table>
			<table name="ship_mode"></table>
			<table name="web_site"></table>		
			<!-- /tables not used in benchmark  -->
			
			<!-- Static tables (fixed small size, generated only on one node, skipped on others) -->
			<table name="date_dim" static="true"></table>
			<table name="time_dim" static="true"></table>
			<table name="customer_demographics" static="true"></table>
			<table name="household_demographics" static="true"></table>
			<!-- /static tables -->
			
			<!-- "normal" tables. split over nodes, but no refresh -->
			<table name="store"></table>
			<table name="warehouse"></table>
			<table name="promotion"></table>
			<table name="web_page"></table>
			<!-- /"normal" tables.-->
			
		<!-- /not refreshed tables -->	
			
			<!-- refreshed tables -->			
			
			<table name="customer">
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
			
			<table name="customer_address">
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
			

			<table name="item">
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
			
			<table name="item_marketprices">
			<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
			
			<table name="inventory">
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
					
			<!-- not refreshed tables  tables -->
			<table name ="store_sales">
				<output name ="MultiLineOutput">
					<multilineFieldId>2</multilineFieldId>
					<interleaveMultilines>false</interleaveMultilines>
					<fileTemplate>outputDir + table.getName() +(nodeCount!=1?"_"+Integer.toString(nodeNumber):"")+ fileEnding</fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
			<table name ="store_returns">
				<output name ="MultiLineOutput">
					<multilineFieldId>2</multilineFieldId>
					<interleaveMultilines>false</interleaveMultilines>
					<fileTemplate>outputDir + table.getName() +(nodeCount!=1?"_"+Integer.toString(nodeNumber):"")+ fileEnding</fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
			<table name ="web_sales">
				<output name ="MultiLineOutput">
					<multilineFieldId>3</multilineFieldId>
					<interleaveMultilines>false</interleaveMultilines>
					<fileTemplate>outputDir + table.getName() +(nodeCount!=1?"_"+Integer.toString(nodeNumber):"")+ fileEnding</fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
			<table name ="web_returns">
				<output name ="MultiLineOutput">
					<multilineFieldId>2</multilineFieldId>
					<interleaveMultilines>false</interleaveMultilines>
					<fileTemplate>outputDir + table.getName() +(nodeCount!=1?"_"+Integer.toString(nodeNumber):"")+ fileEnding</fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
			<table name ="web_clickstreams">
				<output name ="MultiLineOutput">
					<multilineFieldId>3</multilineFieldId>
					<interleaveMultilines>true</interleaveMultilines>
					<fileTemplate>outputDir + table.getName() +(nodeCount!=1?"_"+Integer.toString(nodeNumber):"")+ fileEnding</fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>	
			
			
			<table name="product_reviews">
				<scheduler name="DefaultScheduler">
					<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
					<prePartition><!--  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int updateID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, updateID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
							
					-->
					</prePartition>
					</partitioner>
				</scheduler>
			</table>
			
		</tables>
	</schema>
</generation>

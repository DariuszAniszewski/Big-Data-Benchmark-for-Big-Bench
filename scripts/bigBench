#!/usr/bin/env bash

# Source basic environment
ENV_SETTINGS="`dirname $0`/../setEnvVars"
if [ ! -f "$ENV_SETTINGS" ]
then
	echo "Environment setup file $ENV_SETTINGS not found"
	exit 1
else
	source "$ENV_SETTINGS"
fi

# write environment information into logfile
logEnvInformation

runHiveCmd () {
	if [ "$BINARY" = "$SHARK_BINARY" ]
	then
		local HIVE_PARAMS="-skipRddReload $HIVE_PARAMS"
	fi
	"$BINARY" $HIVE_PARAMS -i "$COMBINED_PARAMS_FILE" "$@"
}

buildCombinedParamsFile () {
	# build combined parameter file for hive
	if [ -r "$GLOBAL_QUERY_PARAMS_FILE" ]
	then
		echo "!echo settings from global parameter file: $GLOBAL_QUERY_PARAMS_FILE ;" >> "$COMBINED_PARAMS_FILE"
		cat "$GLOBAL_QUERY_PARAMS_FILE" > "$COMBINED_PARAMS_FILE"
	else
		echo "Global query parameter file $GLOBAL_QUERY_PARAMS_FILE can not be read."
		rm -rf "$COMBINED_PARAMS_FILE"
		exit 1
	fi

	if [ -r "$GLOBAL_SETTINGS_FILE" ]
	then
		echo "!echo settings from global settings file: $GLOBAL_SETTINGS_FILE ;" >> "$COMBINED_PARAMS_FILE"
		cat "$GLOBAL_SETTINGS_FILE" >> "$COMBINED_PARAMS_FILE"
	else
		echo "Global hive settings file $GLOBAL_SETTINGS_FILE can not be read."
		rm -rf "$COMBINED_PARAMS_FILE"
		exit 1
	fi

	if [[ -n "$LOCAL_HIVE_SETTINGS_FILE" && -r "$LOCAL_HIVE_SETTINGS_FILE" ]]
	then
		echo "!echo settings from local settings file: $LOCAL_HIVE_SETTINGS_FILE ;" >> "$COMBINED_PARAMS_FILE"
		cat "$LOCAL_HIVE_SETTINGS_FILE" >> "$COMBINED_PARAMS_FILE"
	else
		echo "!echo no settings from local settings file: $LOCAL_HIVE_SETTINGS_FILE ;" >> "$COMBINED_PARAMS_FILE"
	fi

	if [ -n "$USER_QUERY_PARAMS_FILE" ]
	then
		if [ -r "$USER_QUERY_PARAMS_FILE" ]
		then
			echo "!echo settings file from -y <query parameter file> command line argument: $USER_QUERY_PARAMS_FILE ;" >> "$COMBINED_PARAMS_FILE"
			cat "$USER_QUERY_PARAMS_FILE" >> "$COMBINED_PARAMS_FILE"
		else
			echo "User query parameter file $USER_QUERY_PARAMS_FILE can not be read."
			rm -rf "$COMBINED_PARAMS_FILE"
			exit 1
		fi
	else
		echo "!echo no settings file from -y <query parameter file> command line argument ;" >> "$COMBINED_PARAMS_FILE"
	fi

	if [ -n "$USER_HIVE_SETTINGS_FILE" ]
	then
		echo "!echo settings file from -z <hive settings file> command line argument: $USER_HIVE_SETTINGS_FILE ;" >> "$COMBINED_PARAMS_FILE"
		if [ -r "$USER_HIVE_SETTINGS_FILE" ]
		then
			cat "$GLOBAL_SETTINGS_FILE" >> "$COMBINED_PARAMS_FILE"
		else
			echo "User hive settings file $USER_HIVE_SETTINGS_FILE can not be read."
			rm -rf "$COMBINED_PARAMS_FILE"
			exit 1
		fi
	else
		echo "!echo no settings file from -z <hive settings file> command line argument ;" >> "$COMBINED_PARAMS_FILE"
	fi
}

initQueryEnv () {
	if [ -z "$QUERY_NUMBER" ]
	then
		echo "The query number must be set."
		exit 1
	fi

	if [[ $QUERY_NUMBER -lt 1 || $QUERY_NUMBER -gt 30 ]]
	then
		echo "Query number must be between 1 and 30"
		exit 1
	fi

	if [ $QUERY_NUMBER -lt 10 ]
	then
		QUERY_NAME=q0$QUERY_NUMBER
	else
		QUERY_NAME=q$QUERY_NUMBER
	fi

	QUERY_DIR="$BIG_BENCH_QUERIES_DIR/$QUERY_NAME"
	if [ ! -d "$QUERY_DIR" ]
	then
		echo "Query directory $QUERY_DIR does not exist"
		exit 1
	fi

	LOCAL_HIVE_SETTINGS_FILE="$QUERY_DIR/hiveLocalSettings.sql"
	buildCombinedParamsFile

	TABLE_PREFIX="${QUERY_NAME}_${BINARY_TYPE}_${BENCHMARK_PHASE}_${STREAM_NUMBER}"

	RESULT_TABLE="${TABLE_PREFIX}_result"
	RESULT_DIR="$BIG_BENCH_HDFS_ABSOLUTE_QUERY_RESULT_DIR/$RESULT_TABLE"
	TEMP_TABLE="${TABLE_PREFIX}_temp"
	TEMP_DIR="$BIG_BENCH_HDFS_ABSOLUTE_TEMP_DIR/$TEMP_TABLE"

	LOG_FILE_NAME="$BIG_BENCH_LOGS_DIR/${TABLE_PREFIX}.log"

	#echo "set BENCHMARK_PHASE=\"$BENCHMARK_PHASE\";" >> "$COMBINED_PARAMS_FILE"
	#echo "set STREAM_NUMBER=\"$STREAM_NUMBER\";" >> "$COMBINED_PARAMS_FILE"
	#echo "set QUERY_NAME=\"$QUERY_NAME\";" >> "$COMBINED_PARAMS_FILE"
	#echo "set QUERY_DIR=\"$QUERY_DIR\";" >> "$COMBINED_PARAMS_FILE"
	#echo "set RESULT_TABLE=\"$RESULT_TABLE\";" >> "$COMBINED_PARAMS_FILE"
	#echo "set RESULT_DIR=\"$RESULT_DIR\";" >> "$COMBINED_PARAMS_FILE"
	#echo "set TEMP_TABLE=\"$TEMP_TABLE\";" >> "$COMBINED_PARAMS_FILE"
	#echo "set TEMP_DIR=\"$TEMP_DIR\";" >> "$COMBINED_PARAMS_FILE"
	#echo "set TABLE_PREFIX=\"$TABLE_PREFIX\";" >> "$COMBINED_PARAMS_FILE"

	HIVE_PARAMS="$HIVE_PARAMS -hiveconf BENCHMARK_PHASE=$BENCHMARK_PHASE -hiveconf STREAM_NUMBER=$STREAM_NUMBER -hiveconf QUERY_NAME=$QUERY_NAME -hiveconf QUERY_DIR=$QUERY_DIR -hiveconf RESULT_TABLE=$RESULT_TABLE -hiveconf RESULT_DIR=$RESULT_DIR -hiveconf TEMP_TABLE=$TEMP_TABLE -hiveconf TEMP_DIR=$TEMP_DIR -hiveconf TABLE_PREFIX=$TABLE_PREFIX"

	# source run.sh as late as possible to allow run.sh to use all above defined variables
	SCRIPT_FILENAME="$QUERY_DIR/run.sh"
	if [ -r "$SCRIPT_FILENAME" ]
	then
		source "$SCRIPT_FILENAME"
	else
		echo "File $SCRIPT_FILENAME containing main method not found, aborting script."
		exit 1
	fi

	# check if the main method was implemented properly in the run.sh
	QUERY_MAIN_METHOD="query_run_main_method"
	if ! declare -F "$QUERY_MAIN_METHOD" > /dev/null 2>&1
	then
		echo "$QUERY_MAIN_METHOD was not implemented, aborting script"
		exit 1
	fi

	# check if the clean method was implemented properly in the run.sh
	QUERY_CLEAN_METHOD="query_run_clean_method"
	if ! declare -F "$QUERY_CLEAN_METHOD" > /dev/null 2>&1
	then
		echo "$QUERY_CLEAN_METHOD was not implemented, aborting script"
		exit 1
	fi
}

HIVE_BINARY_TYPE="hive"
SHARK_BINARY_TYPE="shark"

COMBINED_PARAMS_FILE="`mktemp`"

# parse command line arguments
while getopts ":b:d:f:m:p:q:s:t:y:z:" OPT; do
	case "$OPT" in
		b)
			#echo "-b was triggered, Parameter: $OPTARG" >&2
			case "$OPTARG" in
				"$HIVE_BINARY_TYPE")
					USER_BINARY="$HIVE_BINARY"
					;;
				"$SHARK_BINARY_TYPE")
					USER_BINARY="$SHARK_BINARY"
				;;
				*)
					echo "binary must be $HIVE_BINARY_TYPE or $SHARK_BINARY_TYPE"
					exit 1
				;;
			esac
		;;
		d)
			#echo "-d was triggered, Parameter: $OPTARG" >&2
			DEBUG_QUERY_PART="$OPTARG"
		;;
		f)
			#echo "-f was triggered, Parameter: $OPTARG" >&2
			SCALE_FACTOR="$OPTARG"
		;;
		m)
			#echo "-m was triggered, Parameter: $OPTARG" >&2
			MAP_TASKS="$OPTARG"
		;;
		p)
			#echo "-p was triggered, Parameter: $OPTARG" >&2
			USER_BENCHMARK_PHASE="$OPTARG"
		;;
		q)
			#echo "-q was triggered, Parameter: $OPTARG" >&2
			QUERY_NUMBER="$OPTARG"
		;;
		s)
			#echo "-t was triggered, Parameter: $OPTARG" >&2
			USER_NUMBER_OF_PARALLEL_STREAMS="$OPTARG"
		;;
		t)
			#echo "-s was triggered, Parameter: $OPTARG" >&2
			USER_STREAM_NUMBER="$OPTARG"
		;;
		y)
			#echo "-y was triggered, Parameter: $OPTARG" >&2
			USER_QUERY_PARAMS_FILE="$OPTARG"
		;;
		z)
			#echo "-z was triggered, Parameter: $OPTARG" >&2
			USER_HIVE_SETTINGS_FILE="$OPTARG"
		;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
		;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
	;;
	esac
	LIST_OF_USER_OPTIONS="$LIST_OF_USER_OPTIONS -$OPT $OPTARG"
done
shift $((OPTIND-1))
MODULE_NAME="$1"
shift

# global shared variables
GLOBAL_QUERY_PARAMS_FILE="$BIG_BENCH_HIVE_SCRIPT_DIR/queryParameters.sql"
GLOBAL_HIVE_SETTINGS_FILE="$BIG_BENCH_HIVE_SCRIPT_DIR/hiveSettings.sql"
GLOBAL_SHARK_SETTINGS_FILE="$BIG_BENCH_HIVE_SCRIPT_DIR/sharkSettings.sql"
GLOBAL_BENCHMARK_PHASE="RUN_QUERY"
GLOBAL_STREAM_NUMBER="0"
GLOBAL_NUMBER_OF_PARALLEL_STREAMS="1"

BINARY="${USER_BINARY:-$DEFAULT_BINARY}"
if [ "$BINARY" = "$HIVE_BINARY" ]
then
	BINARY_TYPE="$HIVE_BINARY_TYPE"
	GLOBAL_SETTINGS_FILE="$GLOBAL_HIVE_SETTINGS_FILE"
else
	BINARY_TYPE="$SHARK_BINARY_TYPE"
	GLOBAL_SETTINGS_FILE="$GLOBAL_SHARK_SETTINGS_FILE"
fi

BENCHMARK_PHASE="${USER_BENCHMARK_PHASE:-$GLOBAL_BENCHMARK_PHASE}"
STREAM_NUMBER="${USER_STREAM_NUMBER:-$GLOBAL_STREAM_NUMBER}"
NUMBER_OF_PARALLEL_STREAMS="${USER_NUMBER_OF_PARALLEL_STREAMS:-$GLOBAL_NUMBER_OF_PARALLEL_STREAMS}"

buildCombinedParamsFile

MODULE="$BIG_BENCH_BASH_SCRIPT_DIR/$MODULE_NAME"
if [ -f "$MODULE" ]
then
	source "$MODULE"
else
	echo "Module $MODULE not found, aborting script."
	exit 1
fi

# check if the run method was implemented properly
RUN_METHOD="exec$MODULE_NAME"
if ! declare -F "$RUN_METHOD" > /dev/null 2>&1
then
	echo "$RUN_METHOD was not implemented, aborting script"
	exit 1
fi

# run module
"$RUN_METHOD" "$@"

rm -rf "$COMBINED_PARAMS_FILE"

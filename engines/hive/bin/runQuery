#!/usr/bin/env bash

#"INTEL CONFIDENTIAL"
#Copyright 2015  Intel Corporation All Rights Reserved. 
#
#The source code contained or described herein and all documents related to the source code ("Material") are owned by Intel Corporation or its suppliers or licensors. Title to the Material remains with Intel Corporation or its suppliers and licensors. The Material contains trade secrets and proprietary and confidential information of Intel or its suppliers and licensors. The Material is protected by worldwide copyright and trade secret laws and treaty provisions. No part of the Material may be used, copied, reproduced, modified, published, uploaded, posted, transmitted, distributed, or disclosed in any way without Intel's prior express written permission.
#
#No license under any patent, copyright, trade secret or other intellectual property right is granted to or conferred upon you by disclosure or delivery of the Materials, either expressly, by implication, inducement, estoppel or otherwise. Any license under such intellectual property rights must be express and approved by Intel in writing.

helpModule () {
  echo "This module runs a single query on a single stream"
  echo
  echo "Options:"
  echo -e "-q\tquery number to run (required)"
  echo -e "-d\tdatabase to use"
  echo -e "-D\tquery part to debug"
  echo -e "-h\tshow this help"
  echo -e "-p\tbenchmark phase to use"
  echo -e "-t\tstream number for query run"
  echo -e "-y\tfile with user defined query parameters"
  echo -e "-z\tfile with user defined engine settings"
}

runModule () {
  if ! runCmdWithErrorCheck initQueryEnv
  then
    return 1
  fi

  echo "==============================================="
  echo "Running query : $QUERY_NAME"
  echo "-----------------------------------------------"
  echo "benchmark phase: $BIG_BENCH_BENCHMARK_PHASE"
  echo "stream number  : $BIG_BENCH_STREAM_NUMBER"
  echo "user parameter file: $USER_QUERY_PARAMS_FILE"
  echo "user settings file : $USER_ENGINE_SETTINGS_FILE"
  if [ -n "$DEBUG_QUERY_PART" ]
  then
    echo "query part to debug: $DEBUG_QUERY_PART"
  fi
  echo "log: $LOG_FILE_NAME"
  echo "==============================================="

  ### Checking required folder: logs/; tmp/; result/ if they exist, create them and set permissions

  echo "checking existence of local: $BIG_BENCH_LOGS_DIR"
  if [ ! -d "$BIG_BENCH_LOGS_DIR" ]; then
    mkdir -p "$BIG_BENCH_LOGS_DIR"
  fi

  if [ ! -e "$LOG_FILE_NAME" ] ; then
      touch "$LOG_FILE_NAME"
  fi

  if [ ! -w "$LOG_FILE_NAME" ] ; then
      echo "ERROR: cannot write to: $LOG_FILE_NAME, no permission"
      return 1
  fi

  echo "creating folders and setting permissions"
  runCmdWithErrorCheck hadoop fs -rm -r -f -skipTrash "${RESULT_DIR}"
  runCmdWithErrorCheck hadoop fs -rm -r -f -skipTrash "${TEMP_DIR}"
  runCmdWithErrorCheck hadoop fs -mkdir -p "${RESULT_DIR}"
  runCmdWithErrorCheck hadoop fs -mkdir -p "${TEMP_DIR}"
  runCmdWithErrorCheck hadoop fs -chmod ugo+rw "${BIG_BENCH_HDFS_ABSOLUTE_TEMP_DIR}"
  runCmdWithErrorCheck hadoop fs -chmod ugo+rw "${BIG_BENCH_HDFS_ABSOLUTE_QUERY_RESULT_DIR}"
  runCmdWithErrorCheck hadoop fs -chmod ugo+rw "${RESULT_DIR}"
  runCmdWithErrorCheck hadoop fs -chmod ugo+rw "${TEMP_DIR}"

  # start timed execution of query. Stderr is appended to stdout and both are written into logs/q??.log and to console

  # Run the main method implemented in the query's run.sh
  local TIME_MEASUREMENT_FILE="`mktemp`"
  echo "======= $TABLE_PREFIX time =========" > "$TIME_MEASUREMENT_FILE"
  local STARTDATE="`date +%Y/%m/%d:%H:%M:%S`"
  local STARTDATE_EPOCH="`date +%s`" # seconds since epoch
  { time "$QUERY_MAIN_METHOD" > >(tee -a "$LOG_FILE_NAME") 2>&1 ; } 2>> "$TIME_MEASUREMENT_FILE"
  local STOPDATE="`date +%Y/%m/%d:%H:%M:%S`"
  local STOPDATE_EPOCH="`date +%s`" # seconds since epoch
  cat "$TIME_MEASUREMENT_FILE" >> "$LOG_FILE_NAME"
  rm -rf "$TIME_MEASUREMENT_FILE"
  echo "===========================" | tee -a "$LOG_FILE_NAME" 2>&1

  echo "Start timestamp: $STARTDATE $STARTDATE_EPOCH" | tee -a "$LOG_FILE_NAME" 2>&1
  echo "Stop timestamp: $STOPDATE $STOPDATE_EPOCH" | tee -a "$LOG_FILE_NAME" 2>&1

  echo "======= $TABLE_PREFIX result =======" | tee -a "$LOG_FILE_NAME" 2>&1
  echo "results in: $RESULT_DIR" | tee -a "$LOG_FILE_NAME" 2>&1
  echo "to display: hadoop fs -cat $RESULT_DIR/*" | tee -a "$LOG_FILE_NAME" 2>&1
  echo "=========================" | tee -a "$LOG_FILE_NAME" 2>&1
}
